/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode rotateRight(ListNode head, int k) {
        //Brute force   TC=O(n*k) SC = O(1)
        // if(head == null || head.next == null)    return head;
        // for(int i=0;i<k;i++){
        //     ListNode temp = head;
        //     while(temp.next.next != null)
        //         temp = temp.next;
        //     ListNode end = temp.next;
        //     temp.next = null;
        //     end.next = head;
        //     head = end;
        // }
        // return head;

        // optimal solution TC = O(n) SC = O(1)
        if(head == null || head.next == null || k==0) return head;
        //compute the length of list;
        ListNode curr = head;
        int len = 1;
        while(curr.next!=null){
            len++;
            curr = curr.next;
        }
        //go till that node
        curr.next = head;
        k = k % len;
        k = len - k;
        while(k > 0){
            curr = curr.next;
            k--;
        }

        // make node to head and break connection
        head = curr.next;
        curr.next = null;
        return head;
    }
}
