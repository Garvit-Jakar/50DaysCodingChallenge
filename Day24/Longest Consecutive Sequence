class Solution {
    public int longestConsecutive(int[] nums) {
        // brute force  TC=O(n*n)
        int n = nums.length;
    //     int longest = 0;
    //     for(int i=0;i<n;i++){
    //         int count = 1;
    //         int x = nums[i];
    //         while(ls(nums, x+1, n)){
    //             x  = x+1;
    //             count++;
    //         }
    //         longest = Math.max(longest,count);
    //     }
    //     return longest;
    // }
    // public boolean ls(int[] nums, int num, int n){
    //     for(int i=0;i<n;i++){
    //         if(nums[i]==num)
    //             return true;
    //     }
    //     return false;

    // better solution TC O(n logn) + O(n)
    // Arrays.sort(nums);
    // int count = 0;
    // int longest = 0;
    // int beforeSmaller = Integer.MIN_VALUE;
    // for(int i=0;i<n;i++){
    //     if(nums[i]-1 == beforeSmaller){
    //         count++;
    //         beforeSmaller = nums[i];
    //     }
    //     else if(nums[i] != beforeSmaller){
    //         count=1;
    //         beforeSmaller = nums[i];
    //     }
    //     longest = Math.max(longest, count);
    // }
    // return longest;

    //Optimal Solution TC = O(n) SC = O(n)
        if(n==0) return 0;
        int longest = 0;
        Set<Integer> set = new HashSet<>();
        for(int i=0;i<n;i++){
            set.add(nums[i]);
        }
        for(int it:set){
            if(!set.contains(it-1)){
                int cnt=1;
                int x = it;
                while(set.contains(x+1)){
                    x++;
                    cnt++;
                }
                longest = Math.max(longest, cnt);
            }
        }
        return longest;
    }
}
