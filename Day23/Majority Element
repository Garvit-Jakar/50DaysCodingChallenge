class Solution {
    public int majorityElement(int[] nums) {
        int n = nums.length;
        // Brute force TC= O(n*n)
        // for(int i=0;i<n;i++){
        //     int count = 0;
        //     for(int j=0;j<n;j++){
        //         if(nums[i]==nums[j])
        //             count++;
        //     }
        //     if(count>n/2)
        //         return nums[i];
        // }
        // return -1;
        
        // better solution Hashing
        // HashMap<Integer,Integer> mpp = new HashMap<>();
        // for(int i=0;i<n;i++){
        //     mpp.put(nums[i],mpp.getOrDefault(nums[i],0)+1);
        // }
        // for(Integer i:mpp.keySet()){
        //     if(mpp.get(i)>n/2)
        //         return i;
        // }
        // return -1;

        //optimal solution TC=O(n) SC=O(1)
        int cnt =0;
        int ele=0;
        for(int i=0;i<n;i++){
            if(cnt==0){
                cnt=1;
                ele = nums[i];
            }
            else if(ele == nums[i])
                cnt++;
            else 
                cnt--;
        }
        int count=0;
        for(int i=0;i<n;i++){
            if(nums[i]==ele)
                count++;
        }
        if(count>(n)/2)
            return ele;
        return -1;
    }       
}
