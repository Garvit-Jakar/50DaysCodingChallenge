/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode detectCycle(ListNode head) {
        // Brute Force Hashset  TC=O(n) SC=O(n)
        // HashSet<ListNode> st = new HashSet<>();
        // while(head!=null){
        //     if(st.contains(head))
        //         return head;
        //     st.add(head);
        //     head = head.next;
        // }
        // return null;
        // slow fast pointer method TC=O(n) SC=O(n)
        if(head == null|| head.next == null)
            return null;
        
        ListNode slow = head;
        ListNode fast = head;
        ListNode entry = head;

        while(fast.next!=null && fast.next.next != null){
            slow = slow.next;
            fast = fast.next.next;
            if(slow == fast){
                while(slow!= entry){
                    slow = slow.next;
                    entry = entry.next;
                }
                return entry;
            }
        }
        return null;
    }
}
