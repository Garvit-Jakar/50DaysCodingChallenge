class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
    // Method -1
        // if(head == null)
        //     return head;

        // ListNode temp = head;
        // int count = 0;
        // while(temp != null){
        //     count++;
        //     temp = temp.next;
        // }

        // if(count == n){
        //     head = head.next;
        //     return head;
        // }
    
        // temp = head;
        // int x = count - n;
        // int i=1;
        // while(temp!=null && temp.next!=null){
        //     if(i==x){
        //         temp.next = temp.next.next;
        //     }
        //     i++;
        //     temp = temp.next;
        // }
        // return head;

    //method -2 using 2 pointers (optimal solution)
        //take dummy node
        ListNode temp = new ListNode();
        temp.next = head;
        ListNode slow = temp;
        ListNode fast = temp;
        for(int i=0;i<=n;i++){
            fast = fast.next;
        }
        if(fast==null)
            return head.next;
        while(fast.next != null){
            fast = fast.next;
            slow = slow.next;
        }
        slow.next.next = slow.next.next.next; 
        return head;
    }
}
